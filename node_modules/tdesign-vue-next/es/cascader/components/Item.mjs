/**
 * tdesign v1.9.3
 * (c) 2024 tdesign
 * @license MIT
 */

import { isVNode, defineComponent, ref, computed, createVNode, mergeProps } from 'vue';
import { ChevronRightIcon } from 'tdesign-icons-vue-next';
import { getFullPathLabel } from '../core/helper.mjs';
import { getCascaderItemClass, getCascaderItemIconClass } from '../core/className.mjs';
import { Checkbox } from '../../checkbox/index.mjs';
import { Loading } from '../../loading/index.mjs';
import { usePrefixClass, useCommonClassName } from '../../hooks/useConfig.mjs';
import { useGlobalIcon } from '../../hooks/useGlobalIcon.mjs';
import useRipple from '../../hooks/useRipple.mjs';
import '../../_chunks/dep-ae66bf73.mjs';
import '../../_chunks/dep-437d10c6.mjs';
import '../../_chunks/dep-6ad32365.mjs';
import '../../_chunks/dep-d33c5d88.mjs';
import '../../_chunks/dep-75628739.mjs';
import '../../_chunks/dep-62ad5a36.mjs';
import '../../_chunks/dep-10c900d8.mjs';
import '../../_chunks/dep-bc75f95c.mjs';
import '../../_chunks/dep-6ea85de8.mjs';
import '../../_chunks/dep-0ced8e2e.mjs';
import '../../_chunks/dep-fb9941c5.mjs';
import '../../_chunks/dep-6e7655db.mjs';
import '../../_chunks/dep-f76ec896.mjs';
import '../../_chunks/dep-4382b808.mjs';
import '../../_chunks/dep-1494b54a.mjs';
import '../../_chunks/dep-c70e40ae.mjs';
import '../../_chunks/dep-92ce9c6c.mjs';
import '../../_chunks/dep-e3204123.mjs';
import '../../_chunks/dep-1c5d24dd.mjs';
import '../../_chunks/dep-4d2c39b6.mjs';
import '../../_chunks/dep-0e21c401.mjs';
import '../../_chunks/dep-a5dfe884.mjs';
import '../../checkbox/checkbox.mjs';
import '../../_chunks/dep-a71c8f5b.mjs';
import '../../checkbox/props.mjs';
import '../../hooks/useVModel.mjs';
import '../../_chunks/dep-1c9d9f8d.mjs';
import '../../_chunks/dep-28a28c00.mjs';
import '../../_chunks/dep-003c9b00.mjs';
import '../../_chunks/dep-e98ea432.mjs';
import '../../hooks/tnode.mjs';
import '../../_chunks/dep-190cc0b3.mjs';
import '../../_chunks/dep-29a308fc.mjs';
import '../../_chunks/dep-18af437d.mjs';
import '../../utils/render-tnode.mjs';
import '../../_chunks/dep-5d7be5c6.mjs';
import '../../checkbox/constants.mjs';
import '../../checkbox/hooks/useCheckboxLazyLoad.mjs';
import '../../_common/js/utils/observe.mjs';
import '../../checkbox/hooks/useKeyboardEvent.mjs';
import '../../_common/js/common.mjs';
import '../../hooks/useDisabled.mjs';
import '../../_chunks/dep-36f0e4f4.mjs';
import '../../hooks/useKeepAnimation.mjs';
import '../../_chunks/dep-0223e29d.mjs';
import '../../_chunks/dep-c31faaef.mjs';
import '../../_chunks/dep-5f15268c.mjs';
import '../../_chunks/dep-0894e3ae.mjs';
import '../../_chunks/dep-0e5b2b76.mjs';
import '../../_chunks/dep-f3a27c4c.mjs';
import '../../_chunks/dep-b6946d89.mjs';
import '../../_chunks/dep-3d61d8a6.mjs';
import '../../_chunks/dep-88c02450.mjs';
import '../../_chunks/dep-f7067d3d.mjs';
import '../../_chunks/dep-cd1b7f96.mjs';
import '../../_chunks/dep-eea784eb.mjs';
import '../../_common/js/global-config/default-config.mjs';
import '../../_common/js/global-config/locale/zh_CN.mjs';
import '../../_chunks/dep-0c808c2e.mjs';
import '../../_chunks/dep-4c103c66.mjs';
import '../../config-provider/useConfig.mjs';
import '../../_chunks/dep-db7324ec.mjs';
import '../../_chunks/dep-d090226f.mjs';
import '../../_chunks/dep-3b84887f.mjs';
import '../../config-provider/type.mjs';
import '../../utils/set-style.mjs';
import '../../checkbox/group.mjs';
import '../../_chunks/dep-69da1a80.mjs';
import '../../_chunks/dep-017fc8db.mjs';
import '../../_chunks/dep-2f0b4a52.mjs';
import '../../_chunks/dep-3c3faac3.mjs';
import '../../checkbox/checkbox-group-props.mjs';
import '../../hooks/slot.mjs';
import '../../utils/withInstall.mjs';
import './style/css.mjs';
import '../../checkbox/type.mjs';
import '../../_chunks/dep-c4a2d318.mjs';
import '../../_chunks/dep-143154a5.mjs';
import '../../_chunks/dep-69610219.mjs';
import '../../_chunks/dep-04ba5b59.mjs';
import '../../_chunks/dep-05b564d9.mjs';
import '../../_chunks/dep-f41eb5b9.mjs';
import '../../_chunks/dep-8cc70cb2.mjs';
import '../../loading/plugin.mjs';
import '../../loading/loading.mjs';
import '../../loading/icon/gradient.mjs';
import '../../_common/js/loading/circle-adapter.mjs';
import '../../_common/js/utils/set-style.mjs';
import '../../_common/js/utils/helper.mjs';
import '../../_chunks/dep-8325f53f.mjs';
import '../../_chunks/dep-b20328d2.mjs';
import '../../utils/dom.mjs';
import '../../utils/easing.mjs';
import '../../loading/props.mjs';
import '../../hooks/useTeleport.mjs';
import '../../loading/type.mjs';

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var props = {
  node: {
    type: Object,
    "default": function _default() {
      return {};
    }
  },
  optionChild: {
    type: [Object, Array]
  },
  cascaderContext: {
    type: Object
  },
  onChange: Function,
  onClick: Function,
  onMouseenter: Function
};
var Item = defineComponent({
  name: "TCascaderItem",
  props: props,
  setup: function setup(props2) {
    var liRef = ref();
    useRipple(liRef);
    var COMPONENT_NAME = usePrefixClass("cascader__item");
    var classPrefix = usePrefixClass();
    var _useGlobalIcon = useGlobalIcon({
        ChevronRightIcon: ChevronRightIcon
      }),
      ChevronRightIcon$1 = _useGlobalIcon.ChevronRightIcon;
    var _useCommonClassName = useCommonClassName(),
      STATUS = _useCommonClassName.STATUS,
      SIZE = _useCommonClassName.SIZE;
    var itemClass = computed(function () {
      return getCascaderItemClass(classPrefix.value, props2.node, SIZE.value, STATUS.value, props2.cascaderContext);
    });
    var iconClass = computed(function () {
      return getCascaderItemIconClass(classPrefix.value, props2.node, STATUS.value, props2.cascaderContext);
    });
    function RenderLabelInner(node, cascaderContext) {
      var inputVal = cascaderContext.inputVal;
      var labelText = inputVal ? getFullPathLabel(node) : node.label;
      if (inputVal) {
        var texts = labelText.split(inputVal);
        var doms = [];
        for (var index = 0; index < texts.length; index++) {
          doms.push(createVNode("span", {
            "key": index
          }, [texts[index]]));
          if (index === texts.length - 1) break;
          doms.push(createVNode("span", {
            "key": "".concat(index, "filter"),
            "class": "".concat(COMPONENT_NAME.value, "-label--filter")
          }, [inputVal]));
        }
        return doms;
      }
      return labelText;
    }
    function RenderLabelContent(node, cascaderContext) {
      var label = RenderLabelInner(node, cascaderContext);
      var labelCont = createVNode("span", {
        "title": cascaderContext.inputVal ? getFullPathLabel(node) : node.label,
        "class": ["".concat(COMPONENT_NAME.value, "-label"), "".concat(COMPONENT_NAME.value, "-label--ellipsis")],
        "role": "label"
      }, [label]);
      return labelCont;
    }
    function RenderCheckBox(node, cascaderContext) {
      var checkProps = cascaderContext.checkProps,
        value = cascaderContext.value,
        max = cascaderContext.max,
        inputVal = cascaderContext.inputVal;
      var label = RenderLabelInner(node, cascaderContext);
      return createVNode(Checkbox, mergeProps({
        "checked": node.checked,
        "indeterminate": node.indeterminate,
        "disabled": node.isDisabled() || value.length >= max && max !== 0,
        "name": String(node.value),
        "stopLabelTrigger": !!node.children,
        "title": inputVal ? getFullPathLabel(node) : node.label,
        "onChange": function onChange() {
          props2.onChange();
        }
      }, checkProps), _isSlot(label) ? label : {
        "default": function _default() {
          return [label];
        }
      });
    }
    return function () {
      var cascaderContext = props2.cascaderContext,
        node = props2.node,
        optionChild = props2.optionChild;
      return createVNode("li", {
        "ref": liRef,
        "class": itemClass.value,
        "onClick": props2.onClick,
        "onMouseenter": props2.onMouseenter
      }, [optionChild || (cascaderContext.multiple ? RenderCheckBox(node, cascaderContext) : RenderLabelContent(node, cascaderContext)), node.children && (node.loading ? createVNode(Loading, {
        "class": iconClass.value,
        "size": "small"
      }, null) : createVNode(ChevronRightIcon$1, {
        "class": iconClass.value
      }, null))]);
    };
  }
});

export { Item as default };
//# sourceMappingURL=Item.mjs.map
