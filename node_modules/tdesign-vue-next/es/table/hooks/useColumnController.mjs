/**
 * tdesign v1.9.3
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-a5dfe884.mjs';
import { _ as _slicedToArray } from '../../_chunks/dep-a71c8f5b.mjs';
import { _ as _toConsumableArray } from '../../_chunks/dep-4d2c39b6.mjs';
import { toRefs, ref, computed, watch, createVNode, h, mergeProps } from 'vue';
import { SettingIcon } from 'tdesign-icons-vue-next';
import { DialogPlugin } from '../../dialog/plugin.mjs';
import { renderTitle } from './useTableHeader.mjs';
import '../../hooks/useConfig.mjs';
import { useGlobalIcon } from '../../hooks/useGlobalIcon.mjs';
import useDefaultValue from '../../hooks/useDefaultValue.mjs';
import { getCurrentRowByKey } from '../utils.mjs';
import { Button } from '../../button/index.mjs';
import ColumnCheckboxGroup from '../column-checkbox-group.mjs';
import { i as isFunction_1 } from '../../_chunks/dep-6e7655db.mjs';
import '../../hooks/index.mjs';
import { useConfig } from '../../config-provider/useConfig.mjs';
import { useTNodeJSX } from '../../hooks/tnode.mjs';
import '../../_chunks/dep-d33c5d88.mjs';
import '../../_chunks/dep-0e21c401.mjs';
import '../../dialog/dialog.mjs';
import '../../dialog/props.mjs';
import '../../dialog/hooks.mjs';
import '../../_chunks/dep-5d7be5c6.mjs';
import '../../_chunks/dep-437d10c6.mjs';
import '../../_chunks/dep-6ad32365.mjs';
import '../../_chunks/dep-10c900d8.mjs';
import '../../_chunks/dep-1c5d24dd.mjs';
import '../../_chunks/dep-75628739.mjs';
import '../../_chunks/dep-62ad5a36.mjs';
import '../../_chunks/dep-8bcdb054.mjs';
import '../../_chunks/dep-003c9b00.mjs';
import '../../_chunks/dep-e98ea432.mjs';
import '../../_chunks/dep-d090226f.mjs';
import '../../_chunks/dep-c31faaef.mjs';
import '../../_chunks/dep-5f15268c.mjs';
import '../../_chunks/dep-c70e40ae.mjs';
import '../../_chunks/dep-4382b808.mjs';
import '../../_chunks/dep-f76ec896.mjs';
import '../../_chunks/dep-0894e3ae.mjs';
import '../../_chunks/dep-0ced8e2e.mjs';
import '../../_chunks/dep-fb9941c5.mjs';
import '../../_chunks/dep-1494b54a.mjs';
import '../../_chunks/dep-0e5b2b76.mjs';
import '../../_chunks/dep-f3a27c4c.mjs';
import '../../_chunks/dep-e3204123.mjs';
import '../../_chunks/dep-b6946d89.mjs';
import '../../_chunks/dep-6ea85de8.mjs';
import '../../_chunks/dep-92ce9c6c.mjs';
import '../../_chunks/dep-3b84887f.mjs';
import '../../_chunks/dep-05b564d9.mjs';
import '../../_chunks/dep-dd2681d3.mjs';
import '../../_chunks/dep-18af437d.mjs';
import '../../_chunks/dep-cd1b7f96.mjs';
import '../../_chunks/dep-e56cdb74.mjs';
import '../../_chunks/dep-f7067d3d.mjs';
import '../../_chunks/dep-88c02450.mjs';
import '../../hooks/useDestroyOnClose.mjs';
import '../../_common/js/utils/getScrollbarWidth.mjs';
import '../../_common/js/utils/helper.mjs';
import '../../_chunks/dep-8325f53f.mjs';
import '../../_chunks/dep-b20328d2.mjs';
import '../../_chunks/dep-3c3faac3.mjs';
import '../../_chunks/dep-ae66bf73.mjs';
import '../../hooks/useTeleport.mjs';
import '../../utils/dom.mjs';
import '../../utils/easing.mjs';
import '../../hooks/usePopupManager.mjs';
import '../../_chunks/dep-e7c4d7b2.mjs';
import '../../button/button.mjs';
import '../../loading/index.mjs';
import '../../_chunks/dep-c4a2d318.mjs';
import '../../_chunks/dep-0223e29d.mjs';
import '../../_chunks/dep-3d61d8a6.mjs';
import '../../_chunks/dep-eea784eb.mjs';
import '../../_common/js/global-config/default-config.mjs';
import '../../_common/js/global-config/locale/zh_CN.mjs';
import '../../_chunks/dep-0c808c2e.mjs';
import '../../_chunks/dep-4c103c66.mjs';
import '../../_chunks/dep-143154a5.mjs';
import '../../_chunks/dep-017fc8db.mjs';
import '../../_chunks/dep-69610219.mjs';
import '../../_chunks/dep-04ba5b59.mjs';
import '../../_chunks/dep-f41eb5b9.mjs';
import '../../_chunks/dep-8cc70cb2.mjs';
import '../../loading/plugin.mjs';
import '../../loading/loading.mjs';
import '../../loading/icon/gradient.mjs';
import '../../_common/js/loading/circle-adapter.mjs';
import '../../_common/js/utils/set-style.mjs';
import '../../utils/render-tnode.mjs';
import '../../_chunks/dep-bc75f95c.mjs';
import '../../_chunks/dep-190cc0b3.mjs';
import '../../_chunks/dep-29a308fc.mjs';
import '../../_chunks/dep-28a28c00.mjs';
import '../../_chunks/dep-1c9d9f8d.mjs';
import '../../loading/props.mjs';
import '../../_chunks/dep-db7324ec.mjs';
import '../../config-provider/type.mjs';
import '../../utils/withInstall.mjs';
import './style/css.mjs';
import '../../loading/type.mjs';
import '../../button/props.mjs';
import '../../hooks/useRipple.mjs';
import '../../hooks/useKeepAnimation.mjs';
import '../../utils/set-style.mjs';
import '../../hooks/useDisabled.mjs';
import '../../_chunks/dep-36f0e4f4.mjs';
import '../../button/type.mjs';
import './useMultiHeader.mjs';
import './useClassName.mjs';
import '../ellipsis.mjs';
import '../../_chunks/dep-67dca09a.mjs';
import '../../_chunks/dep-8ee0987a.mjs';
import '../../tooltip/index.mjs';
import '../../tooltip/tooltip.mjs';
import '../../tooltip/props.mjs';
import '../../popup/props.mjs';
import '../../popup/index.mjs';
import '../../popup/popup.mjs';
import '@popperjs/core';
import '../../hooks/useVModel.mjs';
import '../../popup/container.mjs';
import '../../hooks/useResizeObserver.mjs';
import '../../hooks/icon.mjs';
import '../../hooks/slot.mjs';
import '../../hooks/useCommonClassName.mjs';
import '../../hooks/useVirtualScroll.mjs';
import '../../hooks/useImagePreviewUrl.mjs';
import '../../_common/js/upload/utils.mjs';
import '../../_common/js/log/log.mjs';
import '../../popup/type.mjs';
import '../../tooltip/util.mjs';
import '../../tooltip/type.mjs';
import '../../checkbox/index.mjs';
import '../../checkbox/checkbox.mjs';
import '../../checkbox/props.mjs';
import '../../checkbox/constants.mjs';
import '../../checkbox/hooks/useCheckboxLazyLoad.mjs';
import '../../_common/js/utils/observe.mjs';
import '../../checkbox/hooks/useKeyboardEvent.mjs';
import '../../_common/js/common.mjs';
import '../../checkbox/group.mjs';
import '../../_chunks/dep-69da1a80.mjs';
import '../../_chunks/dep-2f0b4a52.mjs';
import '../../checkbox/checkbox-group-props.mjs';
import '../../checkbox/type.mjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function getColumnKeys(columns) {
  var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /* @__PURE__ */new Set();
  for (var i = 0, len = columns.length; i < len; i++) {
    var _col$children;
    var col = columns[i];
    if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
      getColumnKeys(col.children, keys);
    } else {
      col.colKey && keys.add(col.colKey);
    }
  }
  return keys;
}
function useColumnController(props, context) {
  var _useConfig = useConfig("table", props.locale),
    classPrefix = _useConfig.classPrefix,
    globalConfig = _useConfig.globalConfig;
  var _useGlobalIcon = useGlobalIcon({
      SettingIcon: SettingIcon
    }),
    SettingIcon$1 = _useGlobalIcon.SettingIcon;
  var _toRefs = toRefs(props),
    columns = _toRefs.columns,
    columnController = _toRefs.columnController,
    displayColumns = _toRefs.displayColumns,
    columnControllerVisible = _toRefs.columnControllerVisible;
  var dialogInstance = ref(null);
  var renderTNodeJSX = useTNodeJSX();
  var enabledColKeys = computed(function () {
    var _columnController$val;
    var arr = (((_columnController$val = columnController.value) === null || _columnController$val === void 0 ? void 0 : _columnController$val.fields) || _toConsumableArray(getColumnKeys(columns.value))).filter(function (v) {
      return v;
    });
    return new Set(arr);
  });
  var keys = _toConsumableArray(getColumnKeys(columns.value));
  var _useDefaultValue = useDefaultValue(displayColumns, props.defaultDisplayColumns || keys, props.onDisplayColumnsChange, "displayColumns"),
    _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
    tDisplayColumns = _useDefaultValue2[0],
    setTDisplayColumns = _useDefaultValue2[1];
  var columnCheckboxKeys = ref(displayColumns.value || props.defaultDisplayColumns || keys);
  var checkboxGroupList = computed(function () {
    var _columnController$val2;
    if ((_columnController$val2 = columnController.value) !== null && _columnController$val2 !== void 0 && (_columnController$val2 = _columnController$val2.groupColumns) !== null && _columnController$val2 !== void 0 && _columnController$val2.length) {
      return getCheckboxGroupOptions(columns.value);
    }
    var oneItem = {
      label: globalConfig.value.selectAllText,
      options: getCheckboxOptions(columns.value)
    };
    return [oneItem];
  });
  watch([displayColumns], function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1),
      val = _ref2[0];
    columnCheckboxKeys.value = val || props.defaultDisplayColumns || keys;
  });
  function getOneColumnItem(column, i) {
    return {
      label: function label() {
        return renderTitle(context.slots, column, i);
      },
      value: column.colKey,
      disabled: !enabledColKeys.value.has(column.colKey)
    };
  }
  function getCheckboxGroupOptions(columns2) {
    var _columnController$val3;
    var groupColumns = (_columnController$val3 = columnController.value) === null || _columnController$val3 === void 0 ? void 0 : _columnController$val3.groupColumns;
    if (!(groupColumns !== null && groupColumns !== void 0 && groupColumns.length)) return [];
    var groupList = [];
    var loop = function loop(columns3) {
      for (var i = 0, len = columns3.length; i < len; i++) {
        var _column$children;
        var column = columns3[i];
        var oneItem = getOneColumnItem(column, i);
        for (var j = 0, len1 = groupColumns.length; j < len1; j++) {
          var _groupList$j;
          var groupInfo = groupColumns[j];
          if (!groupInfo.columns.includes(column.colKey)) continue;
          if ((_groupList$j = groupList[j]) !== null && _groupList$j !== void 0 && (_groupList$j = _groupList$j.options) !== null && _groupList$j !== void 0 && _groupList$j.length) {
            groupList[j].options.push(oneItem);
          } else {
            groupList[j] = _objectSpread(_objectSpread({}, groupColumns[j]), {}, {
              options: [oneItem]
            });
          }
        }
        if ((_column$children = column.children) !== null && _column$children !== void 0 && _column$children.length) {
          loop(column.children);
        }
      }
    };
    loop(columns2);
    return groupList;
  }
  function getCheckboxOptions(columns2) {
    var _columnController$val4;
    var arr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    if ((_columnController$val4 = columnController.value) !== null && _columnController$val4 !== void 0 && (_columnController$val4 = _columnController$val4.groupColumns) !== null && _columnController$val4 !== void 0 && _columnController$val4.length) return [];
    for (var i = 0, len = columns2.length; i < len; i++) {
      var _item$children;
      var item = columns2[i];
      if ((_item$children = item.children) !== null && _item$children !== void 0 && _item$children.length) {
        getCheckboxOptions(item.children, arr);
      } else {
        if (item.colKey) {
          arr.push(getOneColumnItem(item, i));
        }
      }
    }
    return arr;
  }
  var handleCheckChange = function handleCheckChange(val, ctx) {
    var _props$onColumnChange;
    columnCheckboxKeys.value = val;
    var params = {
      columns: val,
      type: ctx.type,
      currentColumn: getCurrentRowByKey(columns.value, String(ctx.current)),
      e: ctx.e
    };
    (_props$onColumnChange = props.onColumnChange) === null || _props$onColumnChange === void 0 || _props$onColumnChange.call(props, params);
  };
  var handleToggleColumnController = function handleToggleColumnController() {
    var _columnController$val8;
    if (dialogInstance.value) {
      dialogInstance.value.show();
      return;
    }
    dialogInstance.value = DialogPlugin.confirm(_objectSpread({
      header: globalConfig.value.columnConfigTitleText,
      body: function body() {
        var _columnController$val5;
        var widthMode = ((_columnController$val5 = columnController.value) === null || _columnController$val5 === void 0 ? void 0 : _columnController$val5.displayType) === "fixed-width" ? "fixed" : "auto";
        var _ref3 = columnController.value || {},
          columnControllerTopContent = _ref3.columnControllerTopContent,
          columnControllerBottomContent = _ref3.columnControllerBottomContent;
        var defaultNode = createVNode("div", {
          "class": ["".concat(classPrefix.value, "-table__column-controller"), "".concat(classPrefix.value, "-table__column-controller--").concat(widthMode)]
        }, [createVNode("div", {
          "class": "".concat(classPrefix.value, "-table__column-controller-body")
        }, [isFunction_1(columnControllerTopContent) ? columnControllerTopContent(h) : renderTNodeJSX("columnControllerTopContent"), globalConfig.value.columnConfigDescriptionText && createVNode("p", {
          "class": "".concat(classPrefix.value, "-table__column-controller-desc")
        }, [globalConfig.value.columnConfigDescriptionText]), checkboxGroupList.value.map(function (group, index) {
          var _columnController$val6, _columnController$val7;
          var uniqueKey = (_columnController$val6 = columnController.value) !== null && _columnController$val6 !== void 0 && (_columnController$val6 = _columnController$val6.groupColumns) !== null && _columnController$val6 !== void 0 && _columnController$val6.length ? String(group.value || index) : void 0;
          return createVNode(ColumnCheckboxGroup, {
            "key": group.value || index,
            "uniqueKey": uniqueKey,
            "value": columnCheckboxKeys.value,
            "label": group.label,
            "options": group.options,
            "onChange": handleCheckChange,
            "checkboxProps": (_columnController$val7 = columnController.value) === null || _columnController$val7 === void 0 ? void 0 : _columnController$val7.checkboxProps
          }, null);
        }), isFunction_1(columnControllerBottomContent) ? columnControllerBottomContent(h) : renderTNodeJSX("columnControllerBottomContent")])]);
        return defaultNode;
      },
      confirmBtn: globalConfig.value.confirmText,
      cancelBtn: globalConfig.value.cancelText,
      width: 612,
      onConfirm: function onConfirm() {
        setTDisplayColumns(_toConsumableArray(columnCheckboxKeys.value));
        if (columnControllerVisible.value === void 0) {
          dialogInstance.value.hide();
        } else {
          var _props$onColumnContro;
          (_props$onColumnContro = props.onColumnControllerVisibleChange) === null || _props$onColumnContro === void 0 || _props$onColumnContro.call(props, false, {
            trigger: "confirm"
          });
          context.emit("update:columnControllerVisible", false);
        }
      },
      onClose: function onClose() {
        if (columnControllerVisible.value === void 0) {
          dialogInstance.value.hide();
        } else {
          var _props$onColumnContro2;
          (_props$onColumnContro2 = props.onColumnControllerVisibleChange) === null || _props$onColumnContro2 === void 0 || _props$onColumnContro2.call(props, false, {
            trigger: "cancel"
          });
          context.emit("update:columnControllerVisible", false);
        }
      }
    }, ((_columnController$val8 = columnController.value) === null || _columnController$val8 === void 0 ? void 0 : _columnController$val8.dialogProps) || {}));
  };
  watch([columnControllerVisible], function (_ref4) {
    var _ref5 = _slicedToArray(_ref4, 1),
      visible = _ref5[0];
    if (visible === void 0) return;
    if (dialogInstance.value) {
      visible ? dialogInstance.value.show() : dialogInstance.value.hide();
    } else {
      visible && handleToggleColumnController();
    }
  }, {
    immediate: true
  });
  var renderColumnController = function renderColumnController() {
    var _props$columnControll;
    var isColumnController = !!(columnController.value && Object.keys(columnController.value).length);
    var placement = isColumnController ? columnController.value.placement || "top-right" : "";
    if (isColumnController && columnController.value.hideTriggerButton) return null;
    var classes = ["".concat(classPrefix.value, "-table__column-controller-trigger"), _defineProperty({}, "".concat(classPrefix.value, "-align-").concat(placement), !!placement)];
    return createVNode("div", {
      "class": classes
    }, [createVNode(Button, mergeProps({
      "theme": "default",
      "variant": "outline",
      "onClick": handleToggleColumnController,
      "content": globalConfig.value.columnConfigButtonText
    }, (_props$columnControll = props.columnController) === null || _props$columnControll === void 0 ? void 0 : _props$columnControll.buttonProps), {
      icon: function icon() {
        return createVNode(SettingIcon$1, null, null);
      }
    })]);
  };
  return {
    tDisplayColumns: tDisplayColumns,
    columnCheckboxKeys: columnCheckboxKeys,
    renderColumnController: renderColumnController
  };
}

export { useColumnController as default, getColumnKeys };
//# sourceMappingURL=useColumnController.mjs.map
