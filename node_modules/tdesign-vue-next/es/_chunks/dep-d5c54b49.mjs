/**
 * tdesign v1.9.3
 * (c) 2024 tdesign
 * @license MIT
 */

import './dep-437d10c6.mjs';
import { a as _assignValue } from './dep-0e5b2b76.mjs';
import { c as _castPath, a as _toKey } from './dep-05b564d9.mjs';
import { _ as _isIndex } from './dep-b6946d89.mjs';
import { i as isObject_1 } from './dep-62ad5a36.mjs';
import './dep-f76ec896.mjs';

var assignValue = _assignValue,
  castPath = _castPath,
  isIndex = _isIndex,
  isObject = isObject_1,
  toKey = _toKey;

/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */
function baseSet(object, path, value, customizer) {
  if (!isObject(object)) {
    return object;
  }
  path = castPath(path, object);
  var index = -1,
    length = path.length,
    lastIndex = length - 1,
    nested = object;
  while (nested != null && ++index < length) {
    var key = toKey(path[index]),
      newValue = value;
    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
      return object;
    }
    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;
      if (newValue === undefined) {
        newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object;
}
var _baseSet = baseSet;

export { _baseSet as _ };
//# sourceMappingURL=dep-d5c54b49.mjs.map
