/**
 * tdesign v1.9.3
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../../_chunks/dep-4d2c39b6.mjs';
import { _ as _slicedToArray } from '../../_chunks/dep-a71c8f5b.mjs';
import { _ as _defineProperty } from '../../_chunks/dep-a5dfe884.mjs';
import { defineComponent, toRefs, computed, ref, watch, createVNode, Fragment, mergeProps } from 'vue';
import { useCommonClassName } from '../../hooks/useConfig.mjs';
import props from '../props.mjs';
import '../const.mjs';
import PanelHeader from './header.mjs';
import LinearGradient from './linear-gradient.mjs';
import SaturationPanel from './saturation.mjs';
import HueSlider from './hue.mjs';
import AlphaSlider from './alpha.mjs';
import FormatPanel from './format/index.mjs';
import SwatchesPanel from './swatches.mjs';
import '../utils/index.mjs';
import { useBaseClassName } from '../hooks.mjs';
import useVModel from '../../hooks/useVModel.mjs';
import useDefaultValue from '../../hooks/useDefaultValue.mjs';
import { c as cloneDeep_1 } from '../../_chunks/dep-db7324ec.mjs';
import { useConfig } from '../../config-provider/useConfig.mjs';
import { DEFAULT_LINEAR_GRADIENT, DEFAULT_COLOR, TD_COLOR_USED_COLORS_MAX_SIZE, DEFAULT_SYSTEM_SWATCH_COLORS } from '../../_common/js/color-picker/constants.mjs';
import { Color, getColorObject } from '../../_common/js/color-picker/color.mjs';
import '../../_chunks/dep-0e21c401.mjs';
import '../../_chunks/dep-d33c5d88.mjs';
import '../../_chunks/dep-6e7655db.mjs';
import '../../_chunks/dep-437d10c6.mjs';
import '../../_chunks/dep-6ad32365.mjs';
import '../../_chunks/dep-62ad5a36.mjs';
import '../../_chunks/dep-f76ec896.mjs';
import '../../_chunks/dep-d090226f.mjs';
import '../../_chunks/dep-c31faaef.mjs';
import '../../_chunks/dep-5f15268c.mjs';
import '../../_chunks/dep-c70e40ae.mjs';
import '../../_chunks/dep-4382b808.mjs';
import '../../_chunks/dep-0894e3ae.mjs';
import '../../_chunks/dep-0ced8e2e.mjs';
import '../../_chunks/dep-fb9941c5.mjs';
import '../../_chunks/dep-75628739.mjs';
import '../../_chunks/dep-1494b54a.mjs';
import '../../_chunks/dep-0e5b2b76.mjs';
import '../../_chunks/dep-f3a27c4c.mjs';
import '../../_chunks/dep-e3204123.mjs';
import '../../_chunks/dep-10c900d8.mjs';
import '../../_chunks/dep-1c5d24dd.mjs';
import '../../_chunks/dep-b6946d89.mjs';
import '../../_chunks/dep-6ea85de8.mjs';
import '../../_chunks/dep-92ce9c6c.mjs';
import '../../_chunks/dep-3b84887f.mjs';
import '../../_chunks/dep-5d7be5c6.mjs';
import '../../_chunks/dep-0223e29d.mjs';
import '../../_chunks/dep-3d61d8a6.mjs';
import '../../_chunks/dep-88c02450.mjs';
import '../../_chunks/dep-f7067d3d.mjs';
import '../../_chunks/dep-cd1b7f96.mjs';
import '../../_chunks/dep-eea784eb.mjs';
import '../../_common/js/global-config/default-config.mjs';
import '../../_common/js/global-config/locale/zh_CN.mjs';
import '../../_chunks/dep-0c808c2e.mjs';
import '../../_chunks/dep-4c103c66.mjs';
import '../../config-provider/type.mjs';
import '../../radio/index.mjs';
import '../../radio/radio.mjs';
import '../../utils/helper.mjs';
import '../../_chunks/dep-8325f53f.mjs';
import '../../_chunks/dep-190cc0b3.mjs';
import '../../_chunks/dep-003c9b00.mjs';
import '../../_chunks/dep-e98ea432.mjs';
import '../../_chunks/dep-29a308fc.mjs';
import '../../_chunks/dep-18af437d.mjs';
import '../../_chunks/dep-28a28c00.mjs';
import '../../_chunks/dep-3c3faac3.mjs';
import '../../_chunks/dep-b20328d2.mjs';
import '../../_chunks/dep-ae66bf73.mjs';
import '../../radio/props.mjs';
import '../../radio/constants.mjs';
import '../../form/hooks.mjs';
import '../../hooks/tnode.mjs';
import '../../_chunks/dep-1c9d9f8d.mjs';
import '../../utils/render-tnode.mjs';
import '../../_chunks/dep-bc75f95c.mjs';
import '../../radio/group.mjs';
import '../../_chunks/dep-009e46c9.mjs';
import '../../_chunks/dep-83d6a01b.mjs';
import '../../_chunks/dep-1e57b42e.mjs';
import '../../_chunks/dep-67dca09a.mjs';
import '../../_chunks/dep-8ee0987a.mjs';
import '../../radio/radio-group-props.mjs';
import '../../radio/useKeyboard.mjs';
import '../../utils/dom.mjs';
import '../../utils/easing.mjs';
import '../../_common/js/common.mjs';
import '../../watermark/hooks.mjs';
import '../../hooks/useResizeObserver.mjs';
import '../../radio/radio-button.mjs';
import '../../utils/withInstall.mjs';
import './style/css.mjs';
import '../../radio/type.mjs';
import '../../input-number/index.mjs';
import '../../input-number/input-number.mjs';
import 'tdesign-icons-vue-next';
import '../../button/index.mjs';
import '../../button/button.mjs';
import '../../loading/index.mjs';
import '../../_chunks/dep-c4a2d318.mjs';
import '../../_chunks/dep-143154a5.mjs';
import '../../_chunks/dep-017fc8db.mjs';
import '../../_chunks/dep-69610219.mjs';
import '../../_chunks/dep-04ba5b59.mjs';
import '../../_chunks/dep-05b564d9.mjs';
import '../../_chunks/dep-f41eb5b9.mjs';
import '../../_chunks/dep-8cc70cb2.mjs';
import '../../loading/plugin.mjs';
import '../../loading/loading.mjs';
import '../../loading/icon/gradient.mjs';
import '../../_common/js/loading/circle-adapter.mjs';
import '../../_common/js/utils/set-style.mjs';
import '../../_common/js/utils/helper.mjs';
import '../../loading/props.mjs';
import '../../hooks/useTeleport.mjs';
import '../../loading/type.mjs';
import '../../button/props.mjs';
import '../../hooks/useRipple.mjs';
import '../../hooks/useKeepAnimation.mjs';
import '../../utils/set-style.mjs';
import '../../hooks/useDisabled.mjs';
import '../../_chunks/dep-36f0e4f4.mjs';
import '../../button/type.mjs';
import '../../input/index.mjs';
import '../../input/input.mjs';
import '../../input/props.mjs';
import '../../hooks/useGlobalIcon.mjs';
import '../../input/useInput.mjs';
import '../../form/const.mjs';
import '../../hooks/index.mjs';
import '../../hooks/icon.mjs';
import '../../hooks/slot.mjs';
import '../../hooks/useCommonClassName.mjs';
import '../../hooks/useDestroyOnClose.mjs';
import '../../hooks/useVirtualScroll.mjs';
import '../../hooks/useImagePreviewUrl.mjs';
import '../../_common/js/upload/utils.mjs';
import '../../_common/js/log/log.mjs';
import '../../input/useLengthLimit.mjs';
import '../../_common/js/log/index.mjs';
import '../../input/useInputEventHandler.mjs';
import '../../input/useInputWidth.mjs';
import '../../input/input-group.mjs';
import '../../input/input-group-props.mjs';
import '../../input/type.mjs';
import '../../input-number/props.mjs';
import '../../input-number/useInputNumber.mjs';
import '../../_common/js/input-number/number.mjs';
import '../../_common/js/input-number/large-number.mjs';
import '../../input-number/type.mjs';
import './base-props.mjs';
import '../../_common/js/color-picker/draggable.mjs';
import '../../_chunks/dep-e7c4d7b2.mjs';
import './slider.mjs';
import '../../select/index.mjs';
import '../../select/select.mjs';
import '../../_chunks/dep-1b60f9ac.mjs';
import '../../_chunks/dep-d5c54b49.mjs';
import '../../_chunks/dep-e56cdb74.mjs';
import '../../_chunks/dep-69da1a80.mjs';
import '../../_chunks/dep-2f0b4a52.mjs';
import '../../common-components/fake-arrow.mjs';
import '../../select-input/index.mjs';
import '../../select-input/select-input.mjs';
import '../../popup/index.mjs';
import '../../popup/popup.mjs';
import '@popperjs/core';
import '../../popup/container.mjs';
import '../../popup/props.mjs';
import '../../popup/type.mjs';
import '../../select-input/props.mjs';
import '../../select-input/useSingle.mjs';
import '../../select-input/useMultiple.mjs';
import '../../tag-input/index.mjs';
import '../../tag-input/tag-input.mjs';
import '../../tag-input/props.mjs';
import '../../tag-input/hooks/useTagScroll.mjs';
import '../../tag-input/useTagList.mjs';
import '../../tag/index.mjs';
import '../../tag/tag.mjs';
import '../../_chunks/dep-e7ab8269.mjs';
import '../../tag/props.mjs';
import '../../tag/check-tag.mjs';
import '../../tag/check-tag-props.mjs';
import '../../tag/check-tag-group.mjs';
import '../../tag/check-tag-group-props.mjs';
import '../../tag/type.mjs';
import '../../tag-input/hooks/useHover.mjs';
import '../../tag-input/hooks/useDragSorter.mjs';
import '../../tag-input/type.mjs';
import '../../select-input/useOverlayInnerStyle.mjs';
import '../../select-input/type.mjs';
import '../../select/select-panel.mjs';
import '../../_chunks/dep-8bcdb054.mjs';
import '../../_chunks/dep-dd2681d3.mjs';
import '../../select/option.mjs';
import '../../select/option-props.mjs';
import '../../checkbox/index.mjs';
import '../../checkbox/checkbox.mjs';
import '../../checkbox/props.mjs';
import '../../checkbox/constants.mjs';
import '../../checkbox/hooks/useCheckboxLazyLoad.mjs';
import '../../_common/js/utils/observe.mjs';
import '../../checkbox/hooks/useKeyboardEvent.mjs';
import '../../checkbox/group.mjs';
import '../../checkbox/checkbox-group-props.mjs';
import '../../checkbox/type.mjs';
import '../../select/helper.mjs';
import '../../select/optionGroup.mjs';
import '../../select/option-group-props.mjs';
import '../../select/props.mjs';
import '../../select/hooks/usePanelVirtualScroll.mjs';
import '../../select/hooks/useSelectOptions.mjs';
import '../../select/hooks/useKeyboardControl.mjs';
import '../../select/type.mjs';
import './format/inputs.mjs';
import './format/config.mjs';
import '../../_common/js/color-picker/index.mjs';
import '../../_common/js/color-picker/cmyk.mjs';
import '../../_common/js/color-picker/gradient.mjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var ColorPanel = defineComponent({
  name: "ColorPanel",
  props: _objectSpread(_objectSpread({}, props), {}, {
    togglePopup: {
      type: Function
    }
  }),
  setup: function setup(props2) {
    var _props2$colorModes;
    var baseClassName = useBaseClassName();
    var _useCommonClassName = useCommonClassName(),
      STATUS = _useCommonClassName.STATUS;
    var _useConfig = useConfig("colorPicker"),
      t = _useConfig.t,
      globalConfig = _useConfig.globalConfig;
    var statusClassNames = STATUS.value;
    var _toRefs = toRefs(props2),
      inputValue = _toRefs.value,
      modelValue = _toRefs.modelValue,
      recentColors = _toRefs.recentColors;
    var _useVModel = useVModel(inputValue, modelValue, props2.defaultValue, props2.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      innerValue = _useVModel2[0],
      setInnerValue = _useVModel2[1];
    var defaultEmptyColor = computed(function () {
      return isGradient.value ? DEFAULT_LINEAR_GRADIENT : DEFAULT_COLOR;
    });
    var mode = ref(((_props2$colorModes = props2.colorModes) === null || _props2$colorModes === void 0 ? void 0 : _props2$colorModes.length) === 1 ? props2.colorModes[0] : "monochrome");
    var isGradient = computed(function () {
      return mode.value === "linear-gradient";
    });
    var color = ref(new Color(innerValue.value || defaultEmptyColor.value));
    var updateColor = function updateColor() {
      return color.value.update(innerValue.value || defaultEmptyColor.value);
    };
    var formatModel = ref(color.value.isGradient ? "CSS" : "RGB");
    var _useDefaultValue = useDefaultValue(recentColors, props2.defaultRecentColors, props2.onRecentColorsChange, "recentColors"),
      _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
      recentlyUsedColors = _useDefaultValue2[0],
      setRecentlyUsedColors = _useDefaultValue2[1];
    var formatValue = function formatValue() {
      if (mode.value === "linear-gradient") {
        return color.value.linearGradient;
      }
      return color.value.getFormatsColorMap()[props2.format] || color.value.css;
    };
    var addRecentlyUsedColor = function addRecentlyUsedColor() {
      if (recentlyUsedColors.value === null || recentlyUsedColors.value === false) {
        return;
      }
      var colors = cloneDeep_1(recentlyUsedColors.value) || [];
      var currentColor = color.value.isGradient ? color.value.linearGradient : color.value.rgba;
      var index = colors.indexOf(currentColor);
      if (index > -1) {
        colors.splice(index, 1);
      }
      colors.unshift(currentColor);
      if (colors.length > TD_COLOR_USED_COLORS_MAX_SIZE) {
        colors.length = TD_COLOR_USED_COLORS_MAX_SIZE;
      }
      handleRecentlyUsedColorsChange(colors);
    };
    var handleRecentlyUsedColorsChange = function handleRecentlyUsedColorsChange(colors) {
      setRecentlyUsedColors(colors);
    };
    var emitColorChange = function emitColorChange(trigger) {
      setInnerValue(formatValue(), {
        color: getColorObject(color.value),
        trigger: trigger || "palette-saturation-brightness"
      });
    };
    watch(function () {
      return [props2.defaultValue, props2.enableAlpha];
    }, updateColor);
    watch(function () {
      return innerValue.value;
    }, function (newColor) {
      if (newColor !== formatValue()) {
        updateColor();
        mode.value = color.value.isGradient ? "linear-gradient" : "monochrome";
      }
    });
    var handleModeChange = function handleModeChange(value) {
      mode.value = value;
      if (value === "linear-gradient") {
        color.value.update(color.value.gradientColors.length > 0 ? color.value.linearGradient : DEFAULT_LINEAR_GRADIENT);
      } else {
        color.value.update(color.value.rgba);
      }
      emitColorChange();
    };
    var handleFormatModeChange = function handleFormatModeChange(format) {
      return formatModel.value = format;
    };
    var handleSatAndValueChange = function handleSatAndValueChange(_ref) {
      var saturation = _ref.saturation,
        value = _ref.value;
      var _color$value = color.value,
        sat = _color$value.saturation,
        val = _color$value.value;
      var changeTrigger = "palette-saturation-brightness";
      if (value !== val && saturation !== sat) {
        color.value.saturation = saturation;
        color.value.value = value;
        changeTrigger = "palette-saturation-brightness";
      } else if (saturation !== sat) {
        color.value.saturation = saturation;
        changeTrigger = "palette-saturation";
      } else if (value !== val) {
        color.value.value = value;
        changeTrigger = "palette-brightness";
      } else {
        return;
      }
      color.value.update(color.value.rgba);
      emitColorChange(changeTrigger);
    };
    var handleHueChange = function handleHueChange(hue) {
      var _props2$onPaletteBarC;
      color.value.hue = hue;
      emitColorChange("palette-hue-bar");
      (_props2$onPaletteBarC = props2.onPaletteBarChange) === null || _props2$onPaletteBarC === void 0 || _props2$onPaletteBarC.call(props2, {
        color: getColorObject(color.value)
      });
    };
    var handleAlphaChange = function handleAlphaChange(alpha) {
      color.value.alpha = alpha;
      emitColorChange("palette-alpha-bar");
    };
    var handleInputChange = function handleInputChange(input, alpha) {
      color.value.update(input);
      color.value.alpha = alpha;
      emitColorChange("input");
    };
    var handleGradientChange = function handleGradientChange(_ref2) {
      var key = _ref2.key,
        payload = _ref2.payload;
      var trigger = "palette-saturation-brightness";
      switch (key) {
        case "degree":
          color.value.gradientDegree = payload;
          trigger = "input";
          break;
        case "selectedId":
          color.value.gradientSelectedId = payload;
          break;
        case "colors":
          color.value.gradientColors = payload;
          break;
      }
      emitColorChange(trigger);
    };
    var handleSetColor = function handleSetColor(type, value) {
      var isGradientValue = Color.isGradientColor(value);
      if (isGradientValue) {
        if (props2.colorModes.includes("linear-gradient")) {
          mode.value = "linear-gradient";
          color.value.update(value);
          color.value.updateCurrentGradientColor();
        } else {
          console.warn("\u8BE5\u6A21\u5F0F\u4E0D\u652F\u6301\u6E10\u53D8\u8272");
        }
      } else if (mode.value === "linear-gradient") {
        color.value.updateStates(value);
        color.value.updateCurrentGradientColor();
      } else {
        color.value.update(value);
      }
      emitColorChange();
    };
    return {
      baseClassName: baseClassName,
      statusClassNames: statusClassNames,
      t: t,
      globalConfig: globalConfig,
      color: color,
      mode: mode,
      formatModel: formatModel,
      recentlyUsedColors: recentlyUsedColors,
      isGradient: isGradient,
      addRecentlyUsedColor: addRecentlyUsedColor,
      handleModeChange: handleModeChange,
      handleSatAndValueChange: handleSatAndValueChange,
      handleHueChange: handleHueChange,
      handleAlphaChange: handleAlphaChange,
      handleGradientChange: handleGradientChange,
      handleSetColor: handleSetColor,
      handleFormatModeChange: handleFormatModeChange,
      handleInputChange: handleInputChange,
      handleRecentlyUsedColorsChange: handleRecentlyUsedColorsChange
    };
  },
  render: function render() {
    var _systemColors,
      _this = this;
    var t = this.t,
      baseClassName = this.baseClassName,
      statusClassNames = this.statusClassNames,
      globalConfig = this.globalConfig,
      recentColors = this.recentColors,
      swatchColors = this.swatchColors,
      showPrimaryColorPreview = this.showPrimaryColorPreview,
      isGradient = this.isGradient;
    var baseProps = {
      color: this.color,
      disabled: this.disabled
    };
    var showUsedColors = recentColors !== null && recentColors !== false;
    var systemColors = swatchColors;
    if (systemColors === void 0) {
      systemColors = _toConsumableArray(DEFAULT_SYSTEM_SWATCH_COLORS);
    }
    var showSystemColors = ((_systemColors = systemColors) === null || _systemColors === void 0 ? void 0 : _systemColors.length) > 0;
    var renderSwatches = function renderSwatches() {
      if (!showSystemColors && !showUsedColors) {
        return null;
      }
      return createVNode(Fragment, null, [createVNode("div", {
        "class": "".concat(baseClassName, "__swatches-wrap")
      }, [showUsedColors ? createVNode(SwatchesPanel, mergeProps(baseProps, {
        "title": t(globalConfig.recentColorTitle),
        "editable": true,
        "colors": _this.recentlyUsedColors,
        "handleAddColor": _this.addRecentlyUsedColor,
        "onSetColor": function onSetColor(color) {
          return _this.handleSetColor("used", color);
        },
        "onChange": _this.handleRecentlyUsedColorsChange
      }), null) : null, showSystemColors ? createVNode(SwatchesPanel, mergeProps(baseProps, {
        "title": t(globalConfig.swatchColorTitle),
        "colors": systemColors,
        "onSetColor": function onSetColor(color) {
          return _this.handleSetColor("system", color);
        }
      }), null) : null])]);
    };
    return createVNode("div", {
      "class": ["".concat(baseClassName, "__panel"), this.disabled ? statusClassNames.disabled : false]
    }, [createVNode(PanelHeader, mergeProps(this.$props, {
      "mode": this.mode,
      "onModeChange": this.handleModeChange
    }), null), createVNode("div", {
      "class": ["".concat(baseClassName, "__body")]
    }, [isGradient ? createVNode(LinearGradient, mergeProps(baseProps, {
      "onChange": this.handleGradientChange,
      "enableMultipleGradient": this.enableMultipleGradient
    }), null) : null, createVNode(SaturationPanel, mergeProps(baseProps, {
      "onChange": this.handleSatAndValueChange
    }), null), createVNode("div", {
      "class": ["".concat(baseClassName, "__sliders-wrapper")]
    }, [createVNode("div", {
      "class": ["".concat(baseClassName, "__sliders")]
    }, [createVNode(HueSlider, mergeProps(baseProps, {
      "onChange": this.handleHueChange
    }), null), this.enableAlpha ? createVNode(AlphaSlider, mergeProps(baseProps, {
      "onChange": this.handleAlphaChange
    }), null) : null]), showPrimaryColorPreview ? createVNode("div", {
      "class": ["".concat(baseClassName, "__sliders-preview"), "".concat(baseClassName, "--bg-alpha")]
    }, [createVNode("span", {
      "class": "".concat(baseClassName, "__sliders-preview-inner"),
      "style": {
        background: isGradient ? this.color.linearGradient : this.color.rgba
      }
    }, null)]) : null]), createVNode(FormatPanel, mergeProps(this.$props, {
      "color": this.color,
      "format": this.formatModel,
      "onModeChange": this.handleFormatModeChange,
      "onInputChange": this.handleInputChange
    }), null), renderSwatches()])]);
  }
});

export { ColorPanel as default };
//# sourceMappingURL=index.mjs.map
