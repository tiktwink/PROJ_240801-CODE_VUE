/**
 * tdesign v1.9.3
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _slicedToArray } from '../_chunks/dep-a71c8f5b.mjs';
import { _ as _defineProperty } from '../_chunks/dep-a5dfe884.mjs';
import { defineComponent, ref, computed, toRefs, watch, createVNode } from 'vue';
import { d as dayjs } from '../_chunks/dep-0c808c2e.mjs';
import { c as customParseFormat } from '../_chunks/dep-6ca4d97f.mjs';
import { TimeIcon } from 'tdesign-icons-vue-next';
import { RangeInputPopup } from '../range-input/index.mjs';
import _TimePickerPanel from './panel/time-picker-panel.mjs';
import { TIME_PICKER_EMPTY } from '../_common/js/time-picker/const.mjs';
import { validateInputValue, formatInputValue } from '../_common/js/time-picker/utils.mjs';
import props from './time-range-picker-props.mjs';
import useVModel from '../hooks/useVModel.mjs';
import { usePrefixClass, useCommonClassName } from '../hooks/useConfig.mjs';
import { useGlobalIcon } from '../hooks/useGlobalIcon.mjs';
import { useFormDisabled } from '../form/hooks.mjs';
import { useConfig } from '../config-provider/useConfig.mjs';
import '../_chunks/dep-0e21c401.mjs';
import '../_chunks/dep-d33c5d88.mjs';
import '../_chunks/dep-437d10c6.mjs';
import '../_chunks/dep-8ee0987a.mjs';
import '../_chunks/dep-62ad5a36.mjs';
import '../_chunks/dep-f76ec896.mjs';
import '../_chunks/dep-e98ea432.mjs';
import '../_chunks/dep-6ad32365.mjs';
import '../_chunks/dep-75628739.mjs';
import '../range-input/range-input.mjs';
import '../input/index.mjs';
import '../input/input.mjs';
import '../_chunks/dep-8325f53f.mjs';
import '../input/props.mjs';
import '../hooks/tnode.mjs';
import '../_chunks/dep-6e7655db.mjs';
import '../_chunks/dep-190cc0b3.mjs';
import '../_chunks/dep-003c9b00.mjs';
import '../_chunks/dep-10c900d8.mjs';
import '../_chunks/dep-1c5d24dd.mjs';
import '../_chunks/dep-29a308fc.mjs';
import '../_chunks/dep-18af437d.mjs';
import '../_chunks/dep-28a28c00.mjs';
import '../_chunks/dep-1c9d9f8d.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-bc75f95c.mjs';
import '../_chunks/dep-6ea85de8.mjs';
import '../_chunks/dep-0ced8e2e.mjs';
import '../_chunks/dep-fb9941c5.mjs';
import '../_chunks/dep-4382b808.mjs';
import '../_chunks/dep-1494b54a.mjs';
import '../_chunks/dep-c70e40ae.mjs';
import '../_chunks/dep-92ce9c6c.mjs';
import '../_chunks/dep-e3204123.mjs';
import '../_chunks/dep-5d7be5c6.mjs';
import '../input/useInput.mjs';
import '../form/const.mjs';
import '../hooks/index.mjs';
import '../hooks/icon.mjs';
import '../hooks/slot.mjs';
import '../hooks/useCommonClassName.mjs';
import '../hooks/useDefaultValue.mjs';
import '../hooks/useDestroyOnClose.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../_chunks/dep-0223e29d.mjs';
import '../_chunks/dep-c31faaef.mjs';
import '../_chunks/dep-5f15268c.mjs';
import '../_chunks/dep-0894e3ae.mjs';
import '../_chunks/dep-0e5b2b76.mjs';
import '../_chunks/dep-f3a27c4c.mjs';
import '../_chunks/dep-b6946d89.mjs';
import '../_chunks/dep-3d61d8a6.mjs';
import '../_chunks/dep-88c02450.mjs';
import '../_chunks/dep-f7067d3d.mjs';
import '../_chunks/dep-cd1b7f96.mjs';
import '../_chunks/dep-eea784eb.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../_chunks/dep-4c103c66.mjs';
import '../hooks/useRipple.mjs';
import '../utils/set-style.mjs';
import '../hooks/useVirtualScroll.mjs';
import '../hooks/useImagePreviewUrl.mjs';
import '../_common/js/upload/utils.mjs';
import '../_common/js/log/log.mjs';
import '../input/useLengthLimit.mjs';
import '../_common/js/log/index.mjs';
import '../_common/js/utils/helper.mjs';
import '../_chunks/dep-4d2c39b6.mjs';
import '../_chunks/dep-b20328d2.mjs';
import '../_chunks/dep-3c3faac3.mjs';
import '../_chunks/dep-ae66bf73.mjs';
import '../input/useInputEventHandler.mjs';
import '../input/useInputWidth.mjs';
import '../hooks/useResizeObserver.mjs';
import '../_chunks/dep-db7324ec.mjs';
import '../_chunks/dep-d090226f.mjs';
import '../_chunks/dep-3b84887f.mjs';
import '../config-provider/type.mjs';
import '../input/input-group.mjs';
import '../input/input-group-props.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../input/type.mjs';
import '../range-input/props.mjs';
import '../range-input/range-input-popup.mjs';
import '../popup/index.mjs';
import '../popup/popup.mjs';
import '@popperjs/core';
import '../_chunks/dep-67dca09a.mjs';
import '../utils/dom.mjs';
import '../utils/easing.mjs';
import '../_common/js/utils/set-style.mjs';
import '../popup/container.mjs';
import '../popup/props.mjs';
import '../popup/type.mjs';
import '../range-input/range-input-popup-props.mjs';
import '../select-input/useOverlayInnerStyle.mjs';
import '../range-input/type.mjs';
import './panel/props.mjs';
import '../_chunks/dep-36f0e4f4.mjs';
import './props.mjs';
import './panel/single-panel.mjs';
import '../_chunks/dep-8cc70cb2.mjs';
import '../button/button.mjs';
import '../loading/index.mjs';
import '../_chunks/dep-c4a2d318.mjs';
import '../_chunks/dep-143154a5.mjs';
import '../_chunks/dep-017fc8db.mjs';
import '../_chunks/dep-69610219.mjs';
import '../_chunks/dep-04ba5b59.mjs';
import '../_chunks/dep-05b564d9.mjs';
import '../_chunks/dep-f41eb5b9.mjs';
import '../loading/plugin.mjs';
import '../loading/loading.mjs';
import '../loading/icon/gradient.mjs';
import '../_common/js/loading/circle-adapter.mjs';
import '../loading/props.mjs';
import '../hooks/useTeleport.mjs';
import '../loading/type.mjs';
import '../button/props.mjs';
import '../hooks/useDisabled.mjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
dayjs.extend(customParseFormat);
var _TimeRangePicker = defineComponent({
  name: "TTimeRangePicker",
  props: _objectSpread(_objectSpread({}, props), {}, {
    rangeInputProps: Object,
    popupProps: Object
  }),
  setup: function setup(props2) {
    var COMPONENT_NAME = usePrefixClass("time-range-picker");
    var _useConfig = useConfig("timePicker"),
      globalConfig = _useConfig.globalConfig;
    var _useCommonClassName = useCommonClassName(),
      STATUS = _useCommonClassName.STATUS;
    var _useGlobalIcon = useGlobalIcon({
        TimeIcon: TimeIcon
      }),
      TimeIcon$1 = _useGlobalIcon.TimeIcon;
    var disabled = useFormDisabled();
    var currentPanelIdx = ref(void 0);
    var currentValue = ref(TIME_PICKER_EMPTY);
    var isShowPanel = ref(false);
    var inputClasses = computed(function () {
      return ["".concat(COMPONENT_NAME.value, "__group"), _defineProperty({}, STATUS.value.focused, isShowPanel.value)];
    });
    var _toRefs = toRefs(props2),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue,
      allowInput = _toRefs.allowInput,
      format = _toRefs.format;
    var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      innerValue = _useVModel2[0],
      setInnerValue = _useVModel2[1];
    var handleShowPopup = function handleShowPopup(visible, context) {
      if (context.trigger === "trigger-element-click") {
        isShowPanel.value = true;
        return;
      }
      isShowPanel.value = visible;
    };
    var handleClear = function handleClear(context) {
      var e = context.e;
      e.stopPropagation();
      currentValue.value = TIME_PICKER_EMPTY;
      setInnerValue(null);
    };
    var handleClick = function handleClick(_ref2) {
      var position = _ref2.position;
      currentPanelIdx.value = position === "first" ? 0 : 1;
    };
    var handleTimeChange = function handleTimeChange(newValue, e) {
      if (currentPanelIdx.value === 0) {
        var _currentValue$value$;
        currentValue.value = [newValue, (_currentValue$value$ = currentValue.value[1]) !== null && _currentValue$value$ !== void 0 ? _currentValue$value$ : newValue];
      } else {
        var _currentValue$value$2;
        currentValue.value = [(_currentValue$value$2 = currentValue.value[0]) !== null && _currentValue$value$2 !== void 0 ? _currentValue$value$2 : newValue, newValue];
      }
      handleOnPick(newValue, e);
    };
    var handleInputBlur = function handleInputBlur(value2, _ref3) {
      var _props2$onBlur;
      var e = _ref3.e;
      if (allowInput.value) {
        var isValidTime = validateInputValue(currentValue.value[currentPanelIdx.value], format.value);
        if (isValidTime) {
          var _currentValue$value$3, _currentValue$value$4;
          var formattedVal = formatInputValue(currentValue.value[currentPanelIdx.value], format.value);
          currentPanelIdx.value === 0 ? currentValue.value = [formattedVal, (_currentValue$value$3 = currentValue.value[1]) !== null && _currentValue$value$3 !== void 0 ? _currentValue$value$3 : formattedVal] : currentValue.value = [(_currentValue$value$4 = currentValue.value[0]) !== null && _currentValue$value$4 !== void 0 ? _currentValue$value$4 : formattedVal, formattedVal];
        }
      }
      (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 || _props2$onBlur.call(props2, {
        value: value2,
        e: e
      });
    };
    var handleInputChange = function handleInputChange(inputVal, _ref4) {
      var _props2$onInput;
      var e = _ref4.e,
        position = _ref4.position;
      currentValue.value = inputVal;
      (_props2$onInput = props2.onInput) === null || _props2$onInput === void 0 || _props2$onInput.call(props2, {
        value: innerValue.value,
        e: e,
        position: position === "first" ? "start" : "end"
      });
    };
    var handleClickConfirm = function handleClickConfirm() {
      var isValidTime = !currentValue.value.find(function (v) {
        return !validateInputValue(v, format.value);
      });
      if (isValidTime) setInnerValue(currentValue.value);
      isShowPanel.value = false;
    };
    var handleFocus = function handleFocus(value2, _ref5) {
      var _props2$onFocus;
      var e = _ref5.e,
        position = _ref5.position;
      (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 || _props2$onFocus.call(props2, {
        value: value2,
        e: e,
        position: position === "first" ? "start" : "end"
      });
    };
    var handleOnPick = function handleOnPick(pickValue, e) {
      var _props2$onPick;
      var pickedRangeValue = [];
      var context;
      if (currentPanelIdx.value === 0) {
        var _currentValue$value$5;
        pickedRangeValue = [pickValue, (_currentValue$value$5 = currentValue.value[1]) !== null && _currentValue$value$5 !== void 0 ? _currentValue$value$5 : pickValue];
        context = {
          e: e,
          position: "start"
        };
      } else {
        var _currentValue$value$6;
        pickedRangeValue = [(_currentValue$value$6 = currentValue.value[0]) !== null && _currentValue$value$6 !== void 0 ? _currentValue$value$6 : pickValue, pickValue];
        context = {
          e: e,
          position: "end"
        };
      }
      (_props2$onPick = props2.onPick) === null || _props2$onPick === void 0 || _props2$onPick.call(props2, pickedRangeValue, context);
    };
    watch(function () {
      return isShowPanel.value;
    }, function () {
      var _innerValue$value;
      currentValue.value = isShowPanel.value ? (_innerValue$value = innerValue.value) !== null && _innerValue$value !== void 0 ? _innerValue$value : TIME_PICKER_EMPTY : TIME_PICKER_EMPTY;
      if (!isShowPanel.value) currentPanelIdx.value = void 0;
    });
    return function () {
      var _innerValue$value2, _innerValue$value3;
      return createVNode("div", {
        "class": COMPONENT_NAME.value
      }, [createVNode(RangeInputPopup, {
        "disabled": disabled.value,
        "popupVisible": isShowPanel.value,
        "popupProps": _objectSpread({
          overlayInnerStyle: {
            width: "auto",
            padding: 0
          },
          onVisibleChange: handleShowPopup
        }, props2.popupProps),
        "onInputChange": handleInputChange,
        "inputValue": isShowPanel.value ? currentValue.value : (_innerValue$value2 = innerValue.value) !== null && _innerValue$value2 !== void 0 ? _innerValue$value2 : TIME_PICKER_EMPTY,
        "rangeInputProps": _objectSpread({
          size: props2.size,
          clearable: props2.clearable,
          "class": inputClasses.value,
          value: isShowPanel.value ? currentValue.value : (_innerValue$value3 = innerValue.value) !== null && _innerValue$value3 !== void 0 ? _innerValue$value3 : void 0,
          placeholder: props2.placeholder || [globalConfig.value.placeholder, globalConfig.value.placeholder],
          suffixIcon: function suffixIcon() {
            return createVNode(TimeIcon$1, null, null);
          },
          onClear: handleClear,
          onClick: handleClick,
          onFocus: handleFocus,
          onBlur: handleInputBlur,
          readonly: !allowInput.value,
          activeIndex: currentPanelIdx.value
        }, props2.rangeInputProps),
        "status": props2.status,
        "tips": props2.tips,
        "panel": function panel() {
          return createVNode(_TimePickerPanel, {
            "steps": props2.steps,
            "format": format.value,
            "isShowPanel": isShowPanel.value,
            "disableTime": props2.disableTime,
            "hideDisabledTime": props2.hideDisabledTime,
            "isFooterDisplay": true,
            "value": currentValue.value[currentPanelIdx.value || 0],
            "onChange": handleTimeChange,
            "onPick": handleOnPick,
            "handleConfirmClick": handleClickConfirm,
            "position": currentPanelIdx.value === 0 ? "start" : "end",
            "activeIndex": currentPanelIdx.value,
            "presets": props2.presets
          }, null);
        }
      }, null)]);
    };
  }
});

export { _TimeRangePicker as default };
//# sourceMappingURL=time-range-picker.mjs.map
